#!/usr/bin/env ruby
# 1.9 adds realpath to resolve symlinks; 1.8 doesn't
# have this method, so we add it so we get resolved symlinks
# and compatibility
unless File.respond_to? :realpath
  class File #:nodoc:
    def self.realpath path
      return realpath(File.readlink(path)) if symlink?(path)
      path
    end
  end
end
$: << File.expand_path(File.dirname(File.realpath(__FILE__)) + '/../lib')
require 'rubygems'
require 'gli'
require 'ms_utils_version'
require 'ms_utils'

include GLI

PID             = ENV['PID']
ES_NAME         = ENV['ES_NAME']
GD_LOGIN        = ENV['LOGIN']
GD_PASSWORD     = ENV['PASSWORD']
SF_LOGIN        = ENV['SFDC_USERNAME']
SF_PASSWORD     = ENV['SFDC_PASSWORD']

program_desc 'Ms Utils CLI - common ms tasks made easy'

version MsUtils::VERSION

desc 'Generate and optionally execute maql for synchronization of all datasets'
arg_name 'Describe arguments to synchronize_datasets here'
command :synchronize_datasets do |c|
  c.desc 'Model directory'
  c.default_value '.'
  c.flag [:m, :model_dir]
  
  c.desc 'If true synchronization of all found datasets will be executed, otherwise synchronization maql will be output to STDOUT'
  c.default_value false
  c.switch [:e, :execute]
  
  c.desc 'Login to gooddata'
  c.default_value nil
  c.flag [:l, :login]
  
  c.desc 'Password to goodddata'
  c.default_value nil
  c.flag [:p, :password]
  
  c.desc 'PID of a project'
  c.default_value nil
  c.flag :pid
  
  c.action do |global_options,options,args|
    dir = options[:model_dir]
    files = args
  
    file_names = files.empty? ? Dir.glob("#{dir}/*.xml") : files
    MsUtils::synchronize_datasets(file_names, options)
  end  
end

desc 'Get date from date dimension id'
arg_name 'Describe arguments to dim_to_date here'
command :dim_to_date do |c|  
  c.action do |global_options,options,args|
    dim_id = args[0]
    
    fail "Please specify dimension id" if dim_id.nil?
    puts MsUtils::dim_to_date(Integer(dim_id))
  end 
end

desc 'Get date dimension id from date in yyyy-MM-dd format'
arg_name 'Describe arguments to dim_to_date here'
command :date_to_dim do |c|  
  c.action do |global_options,options,args|
    date = args[0]
    
    fail "Please specify date" if date.nil?
    puts MsUtils::date_to_dim(date)
  end 
end

desc 'Get timestamp from date dimension id'
arg_name 'Describe arguments to dim_to_timestamp here'
command :dim_to_timestamp do |c|  
  c.action do |global_options,options,args|
    dim_id = args[0]
    
    fail "Please specify dimension id" if dim_id.nil?
    puts MsUtils::dim_to_timestamp(Integer(dim_id))
  end 
end

desc 'Get dimension id from timestamp'
arg_name 'Describe arguments to timestamp_to_dim here'
command :timestamp_to_dim do |c|  
  c.action do |global_options,options,args|
    timestamp = args[0]
    
    fail "Please specify timestampd" if timestamp.nil?
    puts MsUtils::timestamp_to_dim(Integer(timestamp))
  end 
end

desc 'Get date from date dimension id'
arg_name 'Describe arguments to dim_to_date here'
command :dim_to_date do |c|  
  c.action do |global_options,options,args|
    dim_id = args[0]
    
    fail "Please specify dimension id" if dim_id.nil?
    puts MsUtils::dim_to_date(Integer(dim_id))
  end 
end

desc 'Replace \\r line breaks with \\n in specified csv files'
arg_name 'Describe arguments to fix_linebreaks here'
command :fix_linebreaks do |c|  
  c.desc 'Input directory'
  c.default_value nil
  c.flag [:d, :directory]
  
  c.action do |global_options,options,args|
    dir = options[:directory]
    files = args
    
    fail "One of input directory and files must be specified" if dir.nil? && files.empty?
    
    file_names = files.empty? ? Dir.glob("#{dir}/*.csv") : files
    
    file_names.each do |file|
      MsUtils::fix_line_breaks!(file)
    end
  end
end

desc 'Sets timestamps for all found *.csv files to given timestamp. Skipps rows with timestamp newer than given one.'
arg_name 'Describe arguments to set_timestamps here'
command :set_timestamps do |c|
  c.desc 'Timestamp to be set'
  c.default_value nil
  c.flag [:t, :timestamp]
  
  c.desc 'Source directory. All *.csv files found there will be processed.'
  c.default_value '.'
  c.flag [:s, :source_dir]
  
  c.desc 'Target directory.'
  c.default_value nil
  c.flag [:o, :output_dir]
  
  c.action do |global_options,options,args|
    source_dir = options[:source_dir]
    output_dir = options[:output_dir]
    timestamp  = options[:timestamp]
    
    fail "At least timestamp and target_dir has to be specified." if timestamp.nil? || output_dir.nil?
    
    MsUtils::set_timestamps(Integer(timestamp), source_dir, output_dir)
  end  
end

desc 'Creates deleted records as content of ES minus content of SF. Does not load them.'
arg_name 'Describe arguments to set_timestamps here'
command :create_deleted do |c|
  c.desc 'Directory to which files extracted from ES will be output'
  c.default_value nil
  c.flag [:e, :es_dir]
    
  c.desc 'Directory to which files extracted from SF will be output'
  c.default_value nil
  c.flag [:s, :sf_dir]
  
  c.desc 'Directory containing base JSON files for ES.'
  c.default_value nil
  c.flag [:b, :base_dir]
  
  c.desc 'Path to descriptor file for SF downloader.'
  c.default_value nil
  c.flag [:d, :descriptor_file]
  
  c.desc 'Output dir for deleted files.'
  c.default_value '.'
  c.flag [:o, :output_dir]
  
  c.desc 'Timestamp to be set to deleted records.'
  c.default_value nil
  c.flag [:t, :timestamp]
  
  c.desc 'Login to gooddata'
  c.default_value nil
  c.flag :gd_login
  
  c.desc 'Password to goodddata'
  c.default_value nil
  c.flag :gd_password
  
  c.desc 'PID of a project'
  c.default_value nil
  c.flag :pid
  
  c.desc 'Login to salesforce'
  c.default_value nil
  c.flag :sf_login
  
  c.desc 'Password and token to salesforce'
  c.default_value nil
  c.flag :sf_password
  
  c.desc 'Event store name'
  c.default_value nil
  c.flag :es_name
  
  c.desc 'Download data from SF only for given object'
  c.default_value nil
  c.flag :object
  
  c.desc 'Extract data from ES only for given entity'
  c.default_value nil
  c.flag :entity
  
  c.action do |global_options,options,args|
    
    MsUtils::create_deleted(options)
  end  
end

desc 'Reconstructs deleted records from snapshoted file. Does not load them.'
arg_name 'Describe arguments to set_timestamps here'
command :deleted_from_snapshoted do |c|

  c.desc 'Input snapshoted file.'
  c.default_value nil
  c.flag [:i, :input]
  
  c.desc 'Output file with deleted records.'
  c.default_value nil
  c.flag [:o, :output]
  
  c.desc 'Name of column with id - default is id'
  c.default_value nil
  c.flag [:id]
  
  c.desc 'Name of column with snapshot date - default is snapshot'
  c.default_value nil
  c.flag [:snapshot]
  
  c.action do |global_options,options,args|
    MsUtils::reconstruct_deleted(options)
  end  
end

pre do |global,command,options,args|
  # Pre logic here
  # Return true to proceed; false to abort and not call the
  # chosen command
  # Use skips_pre before a command to skip this block
  # on that command only
  true
end

post do |global,command,options,args|
  # Post logic here
  # Use skips_post before a command to skip this
  # block on that command only
end

on_error do |exception|
  pp exception.backtrace
  # puts "error"
  # Error logic here
  # return false to skip default error handling
  true
end

exit GLI.run(ARGV)
